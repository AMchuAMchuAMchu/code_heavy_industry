(window.webpackJsonp=window.webpackJsonp||[]).push([[502],{2341:function(t,a,s){"use strict";s.r(a);var e=s(54),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1、document"}},[t._v("1、document")])]),s("li",[s("a",{attrs:{href:"#_2、index"}},[t._v("2、index")])]),s("li",[s("a",{attrs:{href:"#_3、type"}},[t._v("3、type")])]),s("li",[s("a",{attrs:{href:"#_4、field"}},[t._v("4、field")])]),s("li",[s("a",{attrs:{href:"#_5、mapping"}},[t._v("5、mapping")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1概念"}},[t._v("①概念")])]),s("li",[s("a",{attrs:{href:"#_2类型自动映射"}},[t._v("②类型自动映射")])]),s("li",[s("a",{attrs:{href:"#_3补充说明"}},[t._v("③补充说明")])]),s("li",[s("a",{attrs:{href:"#_4复杂数据类型"}},[t._v("④复杂数据类型")])])])])])]),s("p"),t._v(" "),s("h1",{attrs:{id:"第一节-elasticsearch内部基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一节-elasticsearch内部基础概念"}},[t._v("#")]),t._v(" 第一节 ElasticSearch内部基础概念")]),t._v(" "),s("h2",{attrs:{id:"_1、document"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、document"}},[t._v("#")]),t._v(" 1、document")]),t._v(" "),s("p",[t._v("document 在 ElasticSearch 中相当于传统数据库中的"),s("code",[t._v("记录")]),t._v("、"),s("code",[t._v("行")]),t._v("的概念，ElasticSearch 中的数据都以 JSON 的形式来表示，在 MySQL 中插入一行数据和 ElasticSearch 中插入一个 JSON 文档是对应的。下面的 JSON 数据表示，一个包含 3 个 field 的 document。")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"age"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"gender"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("一个 document 不只有数据。它还包含了元数据(metadata)——关于文档的信息。三个必须的元数据节点是：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("节点")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("_index")]),t._v(" "),s("td",[t._v("document 存储的地方")])]),t._v(" "),s("tr",[s("td",[t._v("_type")]),t._v(" "),s("td",[t._v("document 代表的对象的类")])]),t._v(" "),s("tr",[s("td",[t._v("_id")]),t._v(" "),s("td",[t._v("document 的唯一标识")])])])]),t._v(" "),s("h2",{attrs:{id:"_2、index"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、index"}},[t._v("#")]),t._v(" 2、index")]),t._v(" "),s("p",[t._v("document 的存储空间，类似于 MySQL 中的数据库概念。")]),t._v(" "),s("h2",{attrs:{id:"_3、type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、type"}},[t._v("#")]),t._v(" 3、type")]),t._v(" "),s("p",[t._v("如果按照关系型数据库中的对应关系，按说还应该有表的概念。但是 ElasticSearch 中没有表的概念，这是 ElasticSearch 和传统关系型数据库的一个区别。在我们建立 index 之后，可以直接往 index  中写入 document。在 ElasticSearch 6.0 版本之前， ElasticSearch 中有 type 的概念，可以理解成关系型数据库中的表，但是官方说这是一个设计上的失误，所以在 ElasticSearch 6.0 版本之后 type 就被废弃了。")]),t._v(" "),s("h2",{attrs:{id:"_4、field"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、field"}},[t._v("#")]),t._v(" 4、field")]),t._v(" "),s("p",[t._v("相当于是数据表的字段、列。field 在 ElasticSearch 中可以理解为 JSON 数据的键。下面的 JSON 数据中，name 就是一个 field。")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_5、mapping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、mapping"}},[t._v("#")]),t._v(" 5、mapping")]),t._v(" "),s("h3",{attrs:{id:"_1概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1概念"}},[t._v("#")]),t._v(" ①概念")]),t._v(" "),s("p",[t._v("类似于关系型数据库中的『表结构』，也就是定义每一个 filed 的类型。每一个 document 都有它自己的 mapping，但是在大多数使用场景中，我们并不需要显式的创建映射，因为 ElasticSearch 中实现了动态映射。我们在索引中写入一个下面的 JSON 文档，在动态映射的作用下，name 会映射成 text 类型，age 会映射成 long 类型。")]),t._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jack"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"age"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"_2类型自动映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2类型自动映射"}},[t._v("#")]),t._v(" ②类型自动映射")]),t._v(" "),s("p",[t._v("自动判断的规则如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("JSON Type")]),t._v(" "),s("th",[t._v("Filed Type")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Boolean："),s("code",[t._v("true")]),t._v(" or "),s("code",[t._v("false")])]),t._v(" "),s("td",[t._v('"boolean"')])]),t._v(" "),s("tr",[s("td",[t._v("Whole number："),s("code",[t._v("123")])]),t._v(" "),s("td",[t._v('"long"')])]),t._v(" "),s("tr",[s("td",[t._v("Floating number："),s("code",[t._v("123.45")])]),t._v(" "),s("td",[t._v('"double"')])]),t._v(" "),s("tr",[s("td",[t._v('String，valid date："2021-08-12"')]),t._v(" "),s("td",[t._v('"date"')])]),t._v(" "),s("tr",[s("td",[t._v('String："foo bar"')]),t._v(" "),s("td",[t._v('"string"')])])])]),t._v(" "),s("p",[t._v("ElasticSearch 支持的类型如下：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("long")]),t._v(" "),s("td",[t._v("带符号的 64 位整数")])]),t._v(" "),s("tr",[s("td",[t._v("integer")]),t._v(" "),s("td",[t._v("带符号的 32 位整数")])]),t._v(" "),s("tr",[s("td",[t._v("short")]),t._v(" "),s("td",[t._v("带符号的 16 位整数")])]),t._v(" "),s("tr",[s("td",[t._v("byte")]),t._v(" "),s("td",[t._v("带符号的 8 位整数")])]),t._v(" "),s("tr",[s("td",[t._v("double")]),t._v(" "),s("td",[t._v("双精度 64 位 IEEE 754 浮点数，限制为有限值")])]),t._v(" "),s("tr",[s("td",[t._v("float")]),t._v(" "),s("td",[t._v("单精度 32 位 IEEE 754 浮点数，限制为有限值")])]),t._v(" "),s("tr",[s("td",[t._v("half_float")]),t._v(" "),s("td",[t._v("半精度 32 位 IEEE 754 浮点数，限制为有限值")])]),t._v(" "),s("tr",[s("td",[t._v("scaled_float")]),t._v(" "),s("td",[t._v("通过缩放因子把浮点数变成long类型")])])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("scaled_float 是通过缩放因子把浮点数变成 long 类型。比如价格只需要精确到分，price 字段的取值为 57.34，设置放大因子为 100，存储起来就是 5734，所有的 API 都会把 price 的取值当作浮点数，事实上 ElasticSearch 底层存储的是整数类型，因为压缩整数比压缩浮点数更加节省存储空间。")])]),t._v(" "),s("h3",{attrs:{id:"_3补充说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3补充说明"}},[t._v("#")]),t._v(" ③补充说明")]),t._v(" "),s("h4",{attrs:{id:"_1-string-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-string-类型"}},[t._v("#")]),t._v(" [1]string 类型")]),t._v(" "),s("p",[t._v("string 类型在 ElasticSearch 旧版本中使用较多，从 ElasticSearch 5.x 开始不再支持 string，由 text 和\nkeyword 类型替代。所以现在 string 类型已经废弃。")]),t._v(" "),s("h4",{attrs:{id:"_2-text-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-text-类型"}},[t._v("#")]),t._v(" [2]text 类型")]),t._v(" "),s("p",[s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("支持分词")]),t._v("、"),s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("不支持聚合")]),t._v("的字符串类型。")]),t._v(" "),s("h4",{attrs:{id:"_3-keyword-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-keyword-类型"}},[t._v("#")]),t._v(" [3]keyword 类型")]),t._v(" "),s("p",[s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("不分词")]),t._v("的字符串类型。整个字符串是一个整体，作为一个单独的词，"),s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("支持聚合")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_4复杂数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4复杂数据类型"}},[t._v("#")]),t._v(" ④复杂数据类型")]),t._v(" "),s("p",[t._v("其实就是 "),s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("JSON 数组")]),t._v("和 "),s("span",{staticStyle:{color:"blue","font-weight":"bold"}},[t._v("JSON 对象")]),t._v("。")]),t._v(" "),s("ul",[s("li",[t._v("JSON 数组：[]")]),t._v(" "),s("li",[t._v("JSON 对象：{}")])]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/pro012-ElasticSearch/lecture/chapter03/index.html"}},[t._v("回目录")]),t._v(" "),s("RouterLink",{attrs:{to:"/pro012-ElasticSearch/lecture/chapter03/verse02.html"}},[t._v("下一节")])],1)])}),[],!1,null,null,null);a.default=r.exports}}]);